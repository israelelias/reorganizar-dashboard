(() => {

  /** --------------------------
   * ‚öôÔ∏è CONFIGURA√á√ïES GERAIS
   * ---------------------------*/
  const config = {
    // Se true ‚Üí remove elementos do DOM
    // Se false ‚Üí apenas oculta via CSS
    removeElements: false,

    selectorsToHideOrRemove: [
      '.section.priorities-section',
      '.content-right-top'
    ],

    // CSS adicional que ser√° injetado
    customCSS: `
      .growl-container {
        visibility: hidden !important;
      }

      .content-fixed.content-left {
        top: 55px;
        bottom: 0;
        left: 0;
        width: 210px;
      }

      .content-fixed.content-center-top {
        position: absolute;
        top: 55px;
        left: 210px;
        bottom: 0;
        right: 210px;
        width: 420px;
        padding: 0 5px;
      }

      .content-fixed.content-right {
        position: absolute;
        top: 55px;
        bottom: 0;
        right: 0;
        width: calc(100% - 630px);
      }
    `
  };

  /** --------------------------
   * üîç FUN√á√ïES DE UTILIDADE
   * ---------------------------*/

  const $ = (selector) => document.querySelector(selector);

  const swapContent = (sourceSel, targetSel) => {
    const source = $(sourceSel);
    const target = $(targetSel);
    if (!source || !target) {
      console.warn(`Elemento n√£o encontrado: ${sourceSel} ou ${targetSel}`);
      return;
    }

    // Armazena o conte√∫do do source
    const temp = target.innerHTML;
    target.innerHTML = source.innerHTML;
    source.innerHTML = temp;
  };

  const hideOrRemoveElements = () => {
    config.selectorsToHideOrRemove.forEach((sel) => {
      document.querySelectorAll(sel).forEach((el) => {
        if (config.removeElements) {
          el.remove();
          console.log(`üóëÔ∏è Removido: ${sel}`);
        } else {
          el.style.visibility = 'hidden';
          el.style.display = 'none';
          console.log(`üôà Ocultado: ${sel}`);
        }
      });
    });
  };

  const injectCustomCSS = () => {
    const style = document.createElement('style');
    style.textContent = config.customCSS.trim();
    document.head.appendChild(style);
    console.log('üé® CSS personalizado injetado.');
  };

  /** --------------------------
   * üß† EXECU√á√ÉO PRINCIPAL
   * ---------------------------*/
  const main = () => {
    console.log('üîß Reorganizando conte√∫do das divs...');

    // Rota do conte√∫do:
    // right ‚Üí left
    // left ‚Üí center-top
    // center-top ‚Üí right
    const contentLeft = $('.content-fixed.content-left');
    const contentCenterTop = $('.content-fixed.content-center-top');
    const contentRight = $('.content-fixed.content-right');

    if (!contentLeft || !contentCenterTop || !contentRight) {
      console.error('‚ùå Estrutura esperada n√£o encontrada.');
      return;
    }

    const tempLeft = contentLeft.innerHTML;
    const tempCenter = contentCenterTop.innerHTML;
    const tempRight = contentRight.innerHTML;

    // Realoca os conte√∫dos
    contentLeft.innerHTML = tempRight;
    contentCenterTop.innerHTML = tempLeft;
    contentRight.innerHTML = tempCenter;

    console.log('‚úÖ Conte√∫dos realocados com sucesso.');

    hideOrRemoveElements();
    injectCustomCSS();

    console.log('‚ú® Script executado com sucesso!');
  };

  /** --------------------------
   * üöÄ INICIALIZA√á√ÉO
   * ---------------------------*/
  try {
    main();
  } catch (err) {
    console.error('‚ö†Ô∏è Erro ao executar o snippet:', err);
  }
})();
